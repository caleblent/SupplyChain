// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require("SupplyChain")
// var DistributorRole = artifacts.require("DistributorRole")

contract("SupplyChain", function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  var sku = 1
  var upc = 1
  const ownerID = accounts[0]
  const originFarmerID = accounts[1]
  const originFarmName = "John Doe"
  const originFarmInformation = "Yarray Valley"
  const originFarmLatitude = "-38.239770"
  const originFarmLongitude = "144.341490"
  var productID = sku + upc
  const productNotes = "Best beans for Espresso"
  const productPrice = web3.toWei(1, "ether")
  var itemState = 0
  const distributorID = accounts[2]
  const retailerID = accounts[3]
  const consumerID = accounts[4]
  const emptyAddress = "0x00000000000000000000000000000000000000"

  ///Available Accounts
  ///==================
  // These accounts are from Ganache (CYNICAL-MIST)
  // (0) 0x627306090abab3a6e1400e9345bc60c78a8bef57
  // (1) 0xf17f52151ebef6c7334fad080c5704d77216b732
  // (2) 0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef
  // (3) 0x821aea9a577a9b44299b9c15c88cf3087f3b5544
  // (4) 0x0d1d4e623d10f9fba5db95830f7d3839406c6af2
  // (5) 0x2932b7a2355d6fecc4b5c0b6bd44cc31df247a2e
  // (6) 0x2191ef87e392377ec08e7c08eb105ef5448eced5
  // (7) 0x0f4f2ac550a1b4e2280d04c21cea7ebd822934b5
  // (8) 0x6330a553fc93768f612722bb8c2ec78ac90b3bbc
  // (9) 0x5aeda56215b167893e80b4fe645ba6d5bab767de

  console.log("ganache-cli accounts used here...")
  console.log("Contract Owner: accounts[0] ", accounts[0])
  console.log("Farmer: accounts[1] ", accounts[1])
  console.log("Distributor: accounts[2] ", accounts[2])
  console.log("Retailer: accounts[3] ", accounts[3])
  console.log("Consumer: accounts[4] ", accounts[4])

  // 1st Test
  it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Give originFarmerID farmer role
    await supplyChain.addFarmer(originFarmerID)

    // Declare and Initialize a variable for event
    var eventEmitted = false

    // Watch the emitted event Harvested()
    var myEvent = supplyChain.Harvested()
    await myEvent.watch((err, res) => {
      eventEmitted = true
    })

    // Mark an item as Harvested by calling function harvestItem()
    await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes,
      { from: originFarmerID }
    )

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU")
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC")
    assert.equal(resultBufferOne[2], originFarmerID, "Error: Missing or Invalid ownerID")
    assert.equal(resultBufferOne[3], originFarmerID, "Error: Missing or Invalid originFarmerID")
    assert.equal(resultBufferOne[4], originFarmName, "Error: Missing or Invalid originFarmName")
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    )
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    )
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    )
    assert.equal(resultBufferTwo[5], 0, "Error: Invalid item State")
    assert.equal(eventEmitted, true, "Invalid event emitted")
  })

  // 2nd Test
  it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
    let eventEmitted = false

    // Watch the emitted event Processed()
    let event = supplyChain.Processed()
    await event.watch((err, res) => {
      eventEmitted = true
    })

    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc, { from: originFarmerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    itemState = 1
    assert.equal(resultBufferTwo[5], itemState, "Error: Invalid item state")
    assert.equal(eventEmitted, true, "Invalid event emitted")
  })

  // 3rd Test
  it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
    let eventEmitted = false

    // Watch the emitted event Packed()
    let event = supplyChain.Packed()
    await event.watch((err, res) => {
      eventEmitted = true
    })

    // Mark an item as Packed by calling function packItem()
    await supplyChain.packItem(upc, { from: originFarmerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    itemState = 2
    assert.equal(resultBufferTwo[5], itemState, "Error: Invalid item state")
    assert.equal(eventEmitted, true, "Invalid event emitted")
  })

  // 4th Test
  it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
    let eventEmitted = false

    // Watch the emitted event ForSale()
    let event = supplyChain.ForSale()
    await event.watch((err, res) => {
      eventEmitted = true
    })

    // Mark an item as ForSale by calling function sellItem()
    await supplyChain.sellItem(upc, productPrice, { from: originFarmerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

    // Verify the result set
    itemState = 3
    assert.equal(resultBufferTwo[4], productPrice, "Error: Invalid item price")
    assert.equal(resultBufferTwo[5], itemState, "Error: Invalid item state")
    assert.equal(eventEmitted, true, "Error: Invalid event emitted")
  })

  // 5th Test
  it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Give distributorID distributor role
    await supplyChain.addDistributor(distributorID)

    // Declare and Initialize a variable for event
    let eventEmitted = false

    // Watch the emitted event Sold()
    let event = supplyChain.Sold()
    await event.watch((err, res) => {
      eventEmitted = true
    })

    // Mark an item as Sold by calling function buyItem()
    supplyChain.buyItem(upc, { from: distributorID, value: productPrice })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

    // Verify the result set
    itemState = 4
    assert.equal(resultBufferOne[2], distributorID, "Error: Invalid ownerID")
    assert.equal(resultBufferTwo[5], itemState, "Error: Invalid item state")
    assert.equal(resultBufferTwo[6], distributorID, "Error: Invalid distributorID")
    assert.equal(eventEmitted, true, "Error: Invalid event emitted")
  })

  // 6th Test
  it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
    let eventEmitted = false

    // Watch the emitted event Shipped()
    let event = supplyChain.Shipped()
    await event.watch((err, res) => {
      eventEmitted = true
    })

    // Mark an item as Shipped by calling function shipItem()
    supplyChain.shipItem(upc, { from: distributorID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

    // Verify the result set
    itemState = 5
    assert.equal(resultBufferTwo[5], itemState, "Error: Invalid item state")
    assert.equal(!eventEmitted, true, "Error: Invalid event emitted")
  })

  // 7th Test
  it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Give retailerID retail role
    await supplyChain.addRetailer(retailerID)

    // Declare and Initialize a variable for event
    let eventEmitted = false

    // Watch the emitted event Received()
    let event = supplyChain.Received()
    await event.watch((err, res) => {
      eventEmitted = true
    })

    // Mark an item as Received by calling function receiveItem()
    supplyChain.receiveItem(upc, { from: retailerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

    // Verify the result set
    itemState = 6
    assert.equal(resultBufferOne[2], retailerID, "Error: Invalid ownerID")
    assert.equal(resultBufferTwo[5], itemState, "Error: Invalid item state")
    assert.equal(resultBufferTwo[7], retailerID, "Error: Invalid retailerID")
    assert.equal(eventEmitted, true, "Error: Invalid event emitted")
  })

  // 8th Test
  it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Give consumerID consumer role
    await supplyChain.addConsumer(consumerID)

    // Declare and Initialize a variable for event
    let eventEmitted = false

    // Watch the emitted event Purchase()
    let event = supplyChain.Purchased()
    await event.watch((err, res) => {
      eventEmitted = true
    })

    // Mark an item as Purchased by calling function purchaseItem()
    supplyChain.purchaseItem(upc, { from: consumerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

    // Verify the result set
    itemState = 7
    assert.equal(resultBufferOne[2], consumerID, "Error: Invalid ownerID")
    assert.equal(resultBufferTwo[5], itemState, "Error: Invalid item state")
    assert.equal(resultBufferTwo[8], consumerID, "Error: Invalid consumerID")
    assert.equal(eventEmitted, true, "Error: Invalid event emitted")
  })

  // 9th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne(upc)

    // Verify the result set:
    assert.equal(resultBufferOne[0], sku, "Error: Invalid itemSKU")
    assert.equal(resultBufferOne[1], upc, "Error: Invalid itemUPC")
    assert.equal(resultBufferOne[2], consumerID, "Error: Invalid ownerID")
    assert.equal(resultBufferOne[3], originFarmerID, "Error: Invalid originFarmerID")
    assert.equal(resultBufferOne[4], originFarmName, "Error: Invalid originFarmName")
    assert.equal(resultBufferOne[5], originFarmInformation, "Error: Invalid originFarmInformation")
    assert.equal(resultBufferOne[6], originFarmLatitude, "Error: Invalid originFarmLatitude")
    assert.equal(resultBufferOne[7], originFarmLongitude, "Error: Invalid originFarmLongitude")
  })

  // 10th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed()

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

    // Verify the result set:
    assert.equal(resultBufferTwo[0], sku, "Error: Invalid itemSKU")
    assert.equal(resultBufferTwo[1], upc, "Error: Invalid itemUPC")
    assert.equal(resultBufferTwo[2], productID, "Error: Invalid productID")
    assert.equal(resultBufferTwo[3], productNotes, "Error: Invalid productNotes")
    assert.equal(resultBufferTwo[4], productPrice, "Error: Invalid productPrice")
    assert.equal(resultBufferTwo[5], itemState, "Error: Invalid itemState")
    assert.equal(resultBufferTwo[6], distributorID, "Error: Invalid distributorID")
    assert.equal(resultBufferTwo[7], retailerID, "Error: Invalid retailerID")
    assert.equal(resultBufferTwo[8], consumerID, "Error: Invalid consumerID")
  })
})
